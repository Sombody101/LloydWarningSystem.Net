//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/AppsIWillNeverFinish/LloydWarningSystem.Net/LloydWarningSystem.Net/FinderBot/Commands/Compiler/LScript/ANTLR/LScriptParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, Sub=3, Local=4, Const=5, Arrow=6, 
		StringLiteral=7, OpenParen=8, CloseParen=9, OpenBrace=10, CloseBrace=11, 
		Comma=12, Semi=13, Equals=14, Identifier=15;
	public const int
		RULE_script = 0, RULE_statement = 1, RULE_variableAssignment = 2, RULE_variableDeclaration = 3, 
		RULE_variableDefinition = 4, RULE_routineDefinition = 5, RULE_routineCall = 6, 
		RULE_block = 7, RULE_expression = 8, RULE_line = 9, RULE_parameterList = 10;
	public static readonly string[] ruleNames = {
		"script", "statement", "variableAssignment", "variableDeclaration", "variableDefinition", 
		"routineDefinition", "routineCall", "block", "expression", "line", "parameterList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'sub'", null, null, "'->'", null, "'('", "')'", "'{'", 
		"'}'", "','", "';'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "Sub", "Local", "Const", 
		"Arrow", "StringLiteral", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
		"Comma", "Semi", "Equals", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33992L) != 0)) {
				{
				{
				State = 22;
				statement();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineDefinitionContext routineDefinition() {
			return GetRuleContext<RoutineDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCallContext routineCall() {
			return GetRuleContext<RoutineCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(LScriptParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(LScriptParser.Semi, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				line();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Sub:
					{
					State = 29;
					routineDefinition();
					}
					break;
				case Identifier:
					{
					State = 30;
					routineCall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Semi) {
					{
					{
					State = 33;
					Match(Semi);
					}
					}
					State = 38;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext variableDefinition() {
			return GetRuleContext<VariableDefinitionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(Identifier);
			State = 42;
			variableDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(LScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LScriptParser.Local, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 44;
				Match(Const);
				}
			}

			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Local) {
				{
				State = 47;
				Match(Local);
				}
			}

			State = 50;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(Equals);
			State = 53;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(LScriptParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(LScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(LScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public RoutineDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineDefinitionContext routineDefinition() {
		RoutineDefinitionContext _localctx = new RoutineDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_routineDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(Sub);
			State = 56;
			Match(Identifier);
			State = 57;
			Match(OpenParen);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 58;
				parameterList();
				}
			}

			State = 61;
			Match(CloseParen);
			State = 62;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(LScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(LScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LScriptParser.Comma, i);
		}
		public RoutineCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCallContext routineCall() {
		RoutineCallContext _localctx = new RoutineCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_routineCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(Identifier);
			State = 65;
			Match(OpenParen);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33992L) != 0)) {
				{
				State = 66;
				expression();
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 67;
					Match(Comma);
					State = 68;
					expression();
					}
					}
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 76;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(LScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(LScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(LScriptParser.Arrow, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				Match(OpenBrace);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33992L) != 0)) {
					{
					{
					State = 79;
					line();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85;
				Match(CloseBrace);
				}
				break;
			case Arrow:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(Arrow);
				State = 87;
				line();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(LScriptParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		public VariableAssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCallContext routineCall() {
			return GetRuleContext<RoutineCallContext>(0);
		}
		public RoutineCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineDefinitionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineDefinitionContext routineDefinition() {
			return GetRuleContext<RoutineDefinitionContext>(0);
		}
		public RoutineDefinitionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineDefinitionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(Identifier);
				}
				break;
			case 2:
				_localctx = new StringLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				Match(StringLiteral);
				}
				break;
			case 3:
				_localctx = new VariableAssignmentExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				variableAssignment();
				}
				break;
			case 4:
				_localctx = new RoutineDefinitionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				routineDefinition();
				}
				break;
			case 5:
				_localctx = new RoutineCallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				routineCall();
				}
				break;
			case 6:
				_localctx = new BlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 95;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(LScriptParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(LScriptParser.Semi, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 18, RULE_line);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			expression();
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 99;
					Match(Semi);
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LScriptParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILScriptParserVisitor<TResult> typedVisitor = visitor as ILScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(Identifier);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 106;
				Match(Comma);
				State = 107;
				Match(Identifier);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,114,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,1,1,1,
		1,1,3,1,32,8,1,1,1,5,1,35,8,1,10,1,12,1,38,9,1,3,1,40,8,1,1,2,1,2,1,2,
		1,3,3,3,46,8,3,1,3,3,3,49,8,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,
		60,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,70,8,6,10,6,12,6,73,9,6,3,6,
		75,8,6,1,6,1,6,1,7,1,7,5,7,81,8,7,10,7,12,7,84,9,7,1,7,1,7,1,7,3,7,89,
		8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,97,8,8,1,9,1,9,5,9,101,8,9,10,9,12,9,104,
		9,9,1,10,1,10,1,10,5,10,109,8,10,10,10,12,10,112,9,10,1,10,1,102,0,11,
		0,2,4,6,8,10,12,14,16,18,20,0,0,120,0,25,1,0,0,0,2,39,1,0,0,0,4,41,1,0,
		0,0,6,45,1,0,0,0,8,52,1,0,0,0,10,55,1,0,0,0,12,64,1,0,0,0,14,88,1,0,0,
		0,16,96,1,0,0,0,18,98,1,0,0,0,20,105,1,0,0,0,22,24,3,2,1,0,23,22,1,0,0,
		0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,1,1,0,0,0,27,25,1,0,0,0,
		28,40,3,18,9,0,29,32,3,10,5,0,30,32,3,12,6,0,31,29,1,0,0,0,31,30,1,0,0,
		0,32,36,1,0,0,0,33,35,5,13,0,0,34,33,1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,
		0,36,37,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,39,28,1,0,0,0,39,31,1,0,0,
		0,40,3,1,0,0,0,41,42,5,15,0,0,42,43,3,8,4,0,43,5,1,0,0,0,44,46,5,5,0,0,
		45,44,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,47,49,5,4,0,0,48,47,1,0,0,0,
		48,49,1,0,0,0,49,50,1,0,0,0,50,51,5,15,0,0,51,7,1,0,0,0,52,53,5,14,0,0,
		53,54,3,16,8,0,54,9,1,0,0,0,55,56,5,3,0,0,56,57,5,15,0,0,57,59,5,8,0,0,
		58,60,3,20,10,0,59,58,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,62,5,9,0,
		0,62,63,3,14,7,0,63,11,1,0,0,0,64,65,5,15,0,0,65,74,5,8,0,0,66,71,3,16,
		8,0,67,68,5,12,0,0,68,70,3,16,8,0,69,67,1,0,0,0,70,73,1,0,0,0,71,69,1,
		0,0,0,71,72,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,74,66,1,0,0,0,74,75,1,
		0,0,0,75,76,1,0,0,0,76,77,5,9,0,0,77,13,1,0,0,0,78,82,5,10,0,0,79,81,3,
		18,9,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,
		0,0,0,84,82,1,0,0,0,85,89,5,11,0,0,86,87,5,6,0,0,87,89,3,18,9,0,88,78,
		1,0,0,0,88,86,1,0,0,0,89,15,1,0,0,0,90,97,5,15,0,0,91,97,5,7,0,0,92,97,
		3,4,2,0,93,97,3,10,5,0,94,97,3,12,6,0,95,97,3,14,7,0,96,90,1,0,0,0,96,
		91,1,0,0,0,96,92,1,0,0,0,96,93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,
		17,1,0,0,0,98,102,3,16,8,0,99,101,5,13,0,0,100,99,1,0,0,0,101,104,1,0,
		0,0,102,103,1,0,0,0,102,100,1,0,0,0,103,19,1,0,0,0,104,102,1,0,0,0,105,
		110,5,15,0,0,106,107,5,12,0,0,107,109,5,15,0,0,108,106,1,0,0,0,109,112,
		1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,21,1,0,0,0,112,110,1,0,0,0,
		14,25,31,36,39,45,48,59,71,74,82,88,96,102,110
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
